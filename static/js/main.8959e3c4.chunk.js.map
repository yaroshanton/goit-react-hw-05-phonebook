{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactEditor/ContactEditor.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","redux/contacts/contact-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","removeContact","changeFilter","ContactEditor","static","onAddContact","PropTypes","func","isRequired","state","handleSubmit","e","preventDefault","props","setState","handleChange","target","value","this","className","onSubmit","type","onChange","Component","connect","dispatch","text","contactsActions","contacts","filter","items","normalizedFilter","toLocaleLowerCase","includes","getVisibleContacts","onRemoveContact","map","contact","onClick","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","loading","document","querySelector"],"mappings":"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","file":"static/js/main.8959e3c4.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('contacts/Add', ({ name, number }) => ({\n    payload: {\n        id: uuidv4(),\n        name,\n        number,\n    }\n}))\n\nconst removeContact = createAction('contacts/Delete');\nconst changeFilter = createAction('contacts/ChangeFilter');\n\n// const addContact = ({ name, number }) => ({\n//     type: types.ADD,\n//     payload: {\n//         id: uuidv4(),\n//         name,\n//         number,\n//     }\n// })\n\n// const removeContact = id => ({\n//     type: types.DELETE,\n//     payload: id\n// })\n\n// const changeFilter = value => ({\n//     type: types.CHANGE_FILTER,\n//     payload: value\n// })\n\n// eslint-disable-next-line\nexport default { addContact, removeContact, changeFilter };","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactEditor.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nclass ContactEditor extends Component {\n    static = {\n        onAddContact: PropTypes.func.isRequired,\n    }\n\n    state = {\n        name: '',\n        number: ''\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.props.onAddContact(this.state)\n        this.setState({\n            name: '',\n            number: ''\n        })\n    }\n\n    handleChange = (e) => {\n        const { name, value } = e.target\n\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    render() {\n        const { name, number } = this.state\n        return (\n            <div className=\"contactForm\" >\n                <form onSubmit={this.handleSubmit} >\n                    <label><p>Name</p>\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={this.handleChange}\n                            name=\"name\"\n                        />\n                    </label>\n                    <label><p>Number</p>\n                        <input\n                            type=\"number\"\n                            value={number}\n                            onChange={this.handleChange}\n                            name=\"number\"\n                        />\n                    </label>\n                    <button className=\"buttonForm\" type=\"submit\">Add contact</button>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onAddContact: (text) => dispatch(contactsActions.addContact(text))\n})\n\nexport default connect(null, mapDispatchToProps)(ContactEditor)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './ContactList.css'\nimport { connect } from 'react-redux'\nimport contactsActions from '../../redux/contacts/contacts-actions'\n\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n    <>\n        <ul className=\"nameList\">\n            {contacts.map(contact => (\n                <li key={contact.id}>\n                    <p>{contact.name}: {contact.number}<button type=\"button\" className=\"buttonNameList\" onClick={() => onRemoveContact(contact.id)}>Delete</button></p>\n\n                </li>\n            ))}\n        </ul>\n    </>\n)\n\nContactList.propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onRemoveContact: PropTypes.func.isRequired\n}\n\nconst getVisibleContacts = (items, filter) => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    return items.filter(({ name }) =>\n        name.toLocaleLowerCase().includes(normalizedFilter))\n\n}\n\nconst mapStateToProps = state => {\n    const { filter, items } = state.contacts;\n    const visibleContacts = getVisibleContacts(items, filter)\n\n    return {\n        contacts: visibleContacts\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onRemoveContact: id => dispatch(contactsActions.removeContact(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport contactsActions from '../../redux/contacts/contacts-actions'\n\n\nfunction Filter({ value, onChange }) {\n    return (\n        <div>\n            <p>Find contacts by name</p>\n            <input\n                type=\"text\"\n                value={value}\n                onChange={onChange} />\n        </div>\n    )\n}\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    value: state.contacts.filter\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react'\nimport ContactEditor from './ContactEditor/ContactEditor'\nimport ContactList from './ContactList/ContactList'\nimport Filter from './Filter/Filter'\n\n\n\nexport default class App extends Component {\n    render() {\n        return (\n            <>\n                <h2>Phonebook</h2>\n                <ContactEditor />\n                <h2>Contacts</h2>\n                <Filter />\n                <ContactList />\n            </>\n        )\n    }\n}\n","import { combineReducers } from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from '../contacts/contacts-actions'\n\nconst initialItems = [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n]\n\nconst items = createReducer(initialItems, {\n    [actions.addContact]: (state, { payload }) => [...state, payload],\n    [actions.removeContact]: (state, { payload }) => state.filter(contact => contact.id !== payload)\n})\n\n// const items = (state = initialItems, { type, payload }) => {\n//     switch (type) {\n//         case types.ADD:\n//             state.map(item => {\n//                 if (payload.name === item.name) {\n//                     return alert(`${item.name} is already in contacts.`)\n//                 } else {\n//                     return [...state, payload]\n//                 }\n//             })\n\n//         case types.DELETE:\n//             return state.filter(contact => contact.id !== payload)\n\n//         default:\n//             return state;\n//     }\n// }\n\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, { payload }) => payload,\n})\n\n// const filter = (state = '', { type, payload }) => {\n//     switch (type) {\n//         case types.CHANGE_FILTER:\n//             return payload;\n\n//         default:\n//             return state;\n//     }\n// }\n\nexport default combineReducers({\n    items,\n    filter\n})","import { configureStore } from '@reduxjs/toolkit';\nimport contactReducer from './contacts/contact-reducer'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst contactsPersistConfig = {\n    key: 'data',\n    storage,\n    blacklist: ['filter'],\n}\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactReducer)\n    },\n    devTools: process.env.NODE_ENV === 'development'\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport App from './components/App';\nimport store from './redux/store'\nimport './base.css';\n\nReactDOM.render(\n    <Provider store={store.store}>\n        <PersistGate loading={null} persistor={store.persistor}>\n            < App />\n        </PersistGate>\n    </Provider >,\n    document.querySelector('#root')\n);"],"sourceRoot":""}